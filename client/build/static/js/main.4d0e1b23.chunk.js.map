{"version":3,"sources":["pages/LoginPage/LoginPage.jsx","pages/SignupPage/SignupPage.jsx","pages/HomePage/HomePage.jsx","utils/tokenService.js","utils/userService.js","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["LoginPage","filter","require","SignupPage","props","state","setInitialState","setState","firstName","lastName","displayName","email","password","passConf","isFirstNameValid","isLastNameValid","isDisplayNameValid","isEmailValid","isPasswordValid","isPassConfValid","firstNameFeedback","lastNameFeedback","displayNameFeedback","emailFeedback","passwordFeedback","passConfFeedback","handleChange","e","field","target","name","value","charAt","toUpperCase","slice","validateFields","Object","keys","attr","match","forEach","replace","document","getElementById","toLowerCase","type","validateName","feedback","Feedback","isNameValid","validateFirstName","validateLastName","validateDisplayName","isFieldValid","length","isProfane","validateEmail","isEmailAvailable","validatePassword","validState","lengthReq","numReq","charReq","fbs","key","fb","includes","getPasswordFeedback","validatePassConf","handleSubmit","preventDefault","handleSignup","split","pop","map","ControlGroup","id","labelText","Group","controlId","Label","Control","onChange","onBlur","isValid","isInvalid","style","height","display","justifyContent","alignItems","Body","autoComplete","onSubmit","this","flexDirection","variant","onClick","React","Component","HomePage","getToken","token","localStorage","getItem","JSON","parse","atob","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","cb","fetch","method","headers","Headers","body","stringify","then","res","json","signup","ok","Error","tokenService","getUser","logout","login","creds","App","handleLogin","userService","backgroundColor","exact","path","render","to","history","Boolean","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d0e1b23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction LoginPage () {\r\n  return <div>\r\n    LoginPage\r\n  </div>\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport './SignupPage.css';\r\n\r\nvar Filter = require('bad-words'),\r\n  filter = new Filter();\r\n\r\n// scroll to the bottom to see all the validation messages\r\n\r\nclass SignupPage extends React.Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.setInitialState();\r\n  }\r\n\r\n  setInitialState = () => {\r\n    this.setState({\r\n      firstName: '',\r\n      lastName:'',\r\n      displayName: '',\r\n      email: '',\r\n      password: '',\r\n      passConf: '',\r\n  \r\n      isFirstNameValid: false,\r\n      isLastNameValid: false,\r\n      isDisplayNameValid: false,\r\n      isEmailValid: false,\r\n      isPasswordValid: false,\r\n      isPassConfValid: false,\r\n  \r\n      firstNameFeedback: null,\r\n      lastNameFeedback: null,\r\n      displayNameFeedback: null,\r\n      emailFeedback: null,\r\n      passwordFeedback: null,\r\n      passConfFeedback: null,\r\n    });\r\n  }\r\n  \r\n  // validation will happen when the value of any field changes\r\n  handleChange = e => {\r\n    let field = e.target.name;\r\n    this.setState({\r\n      [field]: e.target.value\r\n    });\r\n\r\n    // capitalize the first letter of the field name (this will make sense in the next comment)\r\n    field = field.charAt(0).toUpperCase() + field.slice(1);\r\n    // find a method such as: 'validateFirstName' and execute it\r\n    this['validate' + field](e);\r\n  };\r\n\r\n  // looks through all fields that can be validated, and calls the dedicated validation method\r\n  validateFields = () => {\r\n    Object.keys(this.state)\r\n    .filter(attr => attr.match(/^is.*Valid$/))\r\n    .forEach(attr => {\r\n      let field = attr.replace('is', '').replace('Valid', '');\r\n      this['validate' + field]({\r\n        target: document.getElementById(field.charAt(0).toLowerCase() + field.slice(1)),\r\n        type: 'submit'\r\n      });\r\n    });\r\n  }\r\n  \r\n  // This method is used by two separate fields\r\n  validateName = e => {\r\n    let name = e.target.value;\r\n    let feedback = Feedback['name'][0];\r\n    let isNameValid = true;\r\n    if(name === '') {\r\n      feedback = Feedback['name'][1];\r\n      isNameValid = false;\r\n    }\r\n    else if(!name.match(/^[A-Za-z]+$/)){\r\n      feedback = Feedback['name'][2];\r\n      isNameValid = false;\r\n    }\r\n\r\n    let field = e.target.name;\r\n    field = field.charAt(0).toUpperCase() + field.slice(1);\r\n\r\n    this.setState({\r\n      [e.target.name + 'Feedback']: feedback,\r\n      ['is' + field + 'Valid']: isNameValid\r\n    });\r\n  };\r\n\r\n  // These aliases are necessary because the 'validateFields' method expects each field to have a dedicated validation method.\r\n  // Each validation method identifier is expected to include the name of the field it's responsible for validating.\r\n  // This way I can call all validation methods procedurally and keep my code DRY\r\n  validateFirstName = this.validateName;\r\n  validateLastName = this.validateName;\r\n  \r\n  validateDisplayName = e => {\r\n    let displayName = e.target.value;\r\n    let re = /^[A-Za-z]+[A-Za-z\\d_ ]*[A-Za-z\\d]$/;\r\n    let feedback = Feedback['displayName'][0];\r\n    let isFieldValid = true;\r\n\r\n    if(displayName === '' && e.type !== 'change') {\r\n      if(this.state.firstName && this.state.lastName) {\r\n        this.setState({ displayName: this.state.firstName + ' ' + this.state.lastName });\r\n      } else {\r\n        feedback = Feedback['displayName'][1];\r\n        isFieldValid = false;\r\n      }\r\n    }\r\n    else if(displayName.length < 2) {\r\n      feedback=Feedback['displayName'][2];\r\n      isFieldValid = false;\r\n    }\r\n    else if(!displayName.match(re)) {\r\n      feedback = Feedback['displayName'][3];\r\n      isFieldValid = false;\r\n    }\r\n    else if(filter.isProfane(displayName)) {\r\n      feedback = Feedback['displayName'][4];\r\n      isFieldValid = false;\r\n    }\r\n\r\n    this.setState({\r\n      displayNameFeedback: feedback,\r\n      isDisplayNameValid: isFieldValid,\r\n    });\r\n  };\r\n\r\n  validateEmail = e => {\r\n    let email = e.target.value;\r\n    let re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    let feedback = Feedback['email'][0];\r\n    let isEmailValid = true;\r\n\r\n    if(email === '') {\r\n      feedback = Feedback['email'][1];\r\n      isEmailValid = false;\r\n    }\r\n    else if(!email.match(re)){\r\n      feedback = Feedback['email'][2];\r\n      isEmailValid = false;\r\n    }\r\n    \r\n    this.setState({\r\n      emailFeedback: feedback,\r\n      isEmailValid,\r\n    });\r\n    \r\n    if(isEmailValid) {\r\n      this.props.isEmailAvailable(email, () => {\r\n        this.setState({\r\n          emailFeedback: Feedback['email'][3],\r\n          isEmailValid: false\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  validatePassword = e => {\r\n    let password = e.target.value;\r\n    let feedback = Feedback['password'][0];\r\n    let isFieldValid = true;\r\n\r\n    let validState = {\r\n      lengthReq: true,\r\n      numReq: true,\r\n      charReq: true\r\n    }\r\n\r\n    if(password === '') {\r\n      feedback = Feedback['password'][1];\r\n      isFieldValid = false;\r\n    }\r\n    else {\r\n      if(password.length < 6) {\r\n        validState.lengthReq = false;\r\n        isFieldValid = false;\r\n      }\r\n      if(!password.match(/\\d/)) {\r\n        validState.numReq = false;\r\n        isFieldValid = false;\r\n      }\r\n      if(!(password.match(/[a-z]/) && password.match(/[A-Z]/))) {\r\n        validState.charReq = false;\r\n        isFieldValid = false;\r\n      }\r\n      if(!isFieldValid) {\r\n        let fbs = Object.keys(validState).filter(key => !validState[key]);\r\n        let fb = '';\r\n        if(fbs.includes('lengthReq')) fb += Feedback['password'][2] + '|';\r\n        if(fbs.includes('charReq')) fb += Feedback['password'][3] + '|';\r\n        if(fbs.includes('numReq')) fb += Feedback['password'][4] + '|';\r\n        if(fbs !== '') feedback = this.getPasswordFeedback(fb);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      passwordFeedback: feedback,\r\n      isPasswordValid: isFieldValid\r\n    });\r\n  };\r\n  \r\n  validatePassConf = e => {\r\n    let passConf = e.target.value;\r\n    let feedback = Feedback['passConf'][0];\r\n    let isFieldValid = true;\r\n\r\n    if(passConf === '') {\r\n      feedback = Feedback['passConf'][1];\r\n      isFieldValid = false;\r\n    }\r\n    else if(!this.state.isPasswordValid) {\r\n      feedback = Feedback['passConf'][2];\r\n      isFieldValid = false;\r\n    }\r\n    else if(passConf !== this.state.password) {\r\n      feedback = Feedback['passConf'][3];\r\n      isFieldValid = false;\r\n    }\r\n\r\n    this.setState({\r\n      passConfFeedback: feedback,\r\n      isPassConfValid: isFieldValid\r\n    });\r\n  };\r\n\r\n  // on submit, first validate all fields, then make the request.\r\n  // some fields may require an http request of their own, which will happen before the final signup request. (eg check username availability)\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.validateFields();\r\n    this.props.handleSignup({\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      displayName: this.state.displayName,\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    });\r\n    this.setInitialState();\r\n  };\r\n\r\n  // this method is responsible for splitting password feedback when then are multiple messages.\r\n  // this doesn't only need to be used for passwords. At the time of writing this code, only passwords contained multiple feedbacks.\r\n  getPasswordFeedback = (fbs) => {\r\n    fbs = fbs.split('|');\r\n    fbs.pop();\r\n    return <ul>\r\n      {fbs.map(fb =>\r\n        <li>{fb}</li>\r\n      )}\r\n    </ul>;\r\n  }\r\n\r\n  // this helps keep my code DRY\r\n  ControlGroup = ({ id, labelText, type='text' }) => {\r\n    return (\r\n      <Form.Group controlId={id}>\r\n        <Form.Label>{labelText}</Form.Label>\r\n        <Form.Control\r\n          type={type}\r\n          name={id}\r\n          value={this.state[id]}\r\n          onChange={this.handleChange}\r\n          onBlur={this['validate' + id.charAt(0).toUpperCase() + id.slice(1)]}\r\n          isValid={this.state[id + 'Feedback'] && this.state['is' + id.charAt(0).toUpperCase() + id.slice(1) + 'Valid']}\r\n          isInvalid={this.state[id + 'Feedback'] && !this.state['is' + id.charAt(0).toUpperCase() + id.slice(1) + 'Valid']}\r\n        />\r\n        {/* <Form.Control.Feedback type=\"valid\">{this.state[id + 'Feedback']}</Form.Control.Feedback> */}\r\n        <Form.Control.Feedback type=\"invalid\">{this.state[id + 'Feedback']}</Form.Control.Feedback>\r\n      </Form.Group>\r\n    );\r\n  }\r\n  \r\n  render() {\r\n    return <Container\r\n      style={{\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}\r\n    >\r\n      <Card>\r\n        <Card.Body>\r\n          <Form\r\n            autoComplete='off'\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <Row>\r\n              <Col><this.ControlGroup id=\"firstName\" labelText=\"First Name\" /></Col>\r\n              <Col><this.ControlGroup id=\"lastName\" labelText=\"Last Name\" /></Col>\r\n            </Row>\r\n            \r\n            <this.ControlGroup id=\"displayName\" labelText=\"Display Name\" />\r\n            <this.ControlGroup id=\"email\" labelText=\"Email\" />\r\n            <this.ControlGroup id=\"password\" labelText=\"Password\" type=\"password\"/>\r\n            <this.ControlGroup id=\"passConf\" labelText=\"Confirm Password\" type=\"password\"/>\r\n\r\n            <div style={{\r\n              display: 'flex',\r\n              flexDirection: 'row-reverse',\r\n            }}>\r\n              <Button variant=\"secondary\">Cancel</Button>\r\n              <Button variant=\"outline-success\" onClick={this.handleSubmit}>Submit</Button>\r\n            </div>  \r\n\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  }\r\n}\r\n\r\n// static feedback data\r\nconst Feedback = {\r\n  'name': [\r\n    'Looks good.',\r\n    'This field is required.',\r\n    'The name can only contain alphabetic characters.'\r\n  ],\r\n  'displayName': [\r\n    'Looks good.',\r\n    'This field is required.',\r\n    'The name is too short',\r\n    'This name contains invalid characters.',\r\n    'This name contains inappropriate language.'\r\n  ],\r\n  'email': [\r\n    'Looks good.',\r\n    'This field is required.',\r\n    'Please enter a valid email address.',\r\n    'This email has already been taken.'\r\n  ],\r\n  'password': [\r\n    'Looks good.',\r\n    'This field is required.',\r\n    'Must contain a minimum of 6 characters',\r\n    'Must contain both uppercase and lowercase letters.',\r\n    'Must contain at least one number.'\r\n  ],\r\n  'passConf': [\r\n    'Looks good.',\r\n    'This field is required.',\r\n    'The password is invalid',\r\n    'The confirmation does not match the entered password.'\r\n  ]\r\n};\r\n\r\nexport default SignupPage;","import React from 'react';\r\n\r\nfunction HomePage() {\r\n  return <div>\r\n    HomePage\r\n  </div>;\r\n}\r\n\r\nexport default HomePage;","function setToken(token) {\r\n  if (token) {\r\n    localStorage.setItem('token', token);\r\n  } else {\r\n    localStorage.removeItem('token');\r\n  }\r\n}\r\n\r\nfunction getToken() {\r\n  let token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Check if expired, remove if it is\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\r\n    if (payload.exp < Date.now() / 1000) {\r\n      localStorage.removeItem('token');\r\n      token = null;\r\n    }\r\n  }\r\n  return token;\r\n}\r\n\r\nfunction getUserFromToken() {\r\n  const token = getToken();\r\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\r\n}\r\n\r\nfunction removeToken() {\r\n  localStorage.removeItem('token');\r\n}\r\n\r\nexport default {\r\n  setToken,\r\n  getToken,\r\n  removeToken,\r\n  getUserFromToken\r\n};","import tokenService from './tokenService';\r\n\r\nconst BASE_URL = '/api/users/';\r\n\r\nfunction signup(user) {\r\n  return fetch(BASE_URL + 'signup', {\r\n    method: 'POST',\r\n    headers: new Headers({'Content-Type': 'application/json'}),\r\n    body: JSON.stringify(user)\r\n  })\r\n  .then(res => {\r\n    if (res.ok) return res.json();\r\n    // Probably a duplicate email\r\n    throw new Error('Email already taken!');\r\n  })\r\n  // Parameter destructuring!\r\n  .then(({token}) => tokenService.setToken(token));\r\n  // The above could have been written as\r\n  //.then((token) => token.token);\r\n}\r\n\r\nfunction login(creds) {\r\n  return fetch(BASE_URL + 'login', {\r\n    method: 'POST',\r\n    headers: new Headers({'Content-Type': 'application/json'}),\r\n    body: JSON.stringify(creds)\r\n  })\r\n  .then(res => {\r\n    // Valid login if we have a status of 2xx (res.ok)\r\n    if (res.ok) return res.json();\r\n    throw new Error('Bad Credentials!');\r\n  })\r\n  .then(({token}) => tokenService.setToken(token));\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction isEmailAvailable(email, cb) {\r\n  return fetch(BASE_URL, {\r\n    method: 'POST',\r\n    headers: new Headers({'Content-Type': 'application/json'}),\r\n    body: JSON.stringify({ email })\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(res) cb();\r\n  });\r\n}\r\n\r\nexport default {\r\n  isEmailAvailable,\r\n  signup, \r\n  getUser,\r\n  logout,\r\n  login\r\n};","import React, { Component } from 'react';\r\nimport LoginPage from '../LoginPage/LoginPage.jsx';\r\nimport SignupPage from '../SignupPage/SignupPage.jsx';\r\nimport HomePage from '../HomePage/HomePage.jsx';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\nimport userService from '../../utils/userService';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: null,\r\n  };\r\n\r\n  handleLogin = () => {\r\n    this.setState({\r\n      user: userService.getUser(),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <Router>\r\n      <div style={{\r\n        backgroundColor: '#18121E',\r\n        height: '100vh'\r\n      }}>\r\n        <Switch>\r\n          <Route exact path=\"/\" render={ props =>\r\n            this.state.user\r\n            ? <HomePage />\r\n            : <Redirect to=\"/signup\" /> }\r\n          />\r\n\r\n          <Route exact path=\"/signup\" render={ props =>\r\n            <SignupPage\r\n              history={props.history}\r\n              isEmailAvailable={userService.isEmailAvailable}\r\n              handleSignup={userService.signup}\r\n            /> } \r\n          />\r\n\r\n          <Route exact path=\"/login\" render={ props =>\r\n            <LoginPage /> }\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './pages/App/App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}